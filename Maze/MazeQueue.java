////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Author: Benjamin Napoli
// Student ID: c3303671
//
// Purpose Of This Class:
// his class is a simple queue data structure made with standard queue functionality that was needed for maze. this queue
// is used in the bredth first search to queue vertexes adjacent nodes and search level by level.
//
// Created using an array, Delete Theta(1), Get Top Theta(1), Get Rear Theta(1), Add Theta(1)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class MazeQueue
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //private Variables
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
    private int F, R, qSize;
	private Node[] node;
	private boolean empty;


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    public MazeQueue(int size)
    {
        F = 0;
		R = 0;
		qSize = size;
		node = new Node[size];
		empty = true;
    }
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Getter method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    public boolean getEmpty()
    {
        return empty;
    }
	

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	public Node peek()
	{
		return node[F];
	}
	
	
	public Node peekRear() // need a peekRear method for parent relationship for backtrack through maze
	{
		return node[R-1];
	}


    public Node dequeue()
    {
		F++;
		
		if (F >= qSize)
		{
			F = 0;
			if (F == R)
			{
				empty = true;
			}
			return node[qSize-1];
		}
		
		if (F == R)
		{
			empty = true;
		}
		return node[F-1];
		
    }
	
	
	public void enqueue(Node in)
    {
		
		if (empty == true)
		{
			empty = false; 
		}
		
		node[R] = in;
		
		R++;
		
		if (R >= qSize)
		{
			R = 0;
		}
		
    }
	

}
