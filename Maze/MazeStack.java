////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Author: Benjamin Napoli
// Student ID: c3303671
//
// Purpose Of This Class:
// This class is a simple stack data structure made with standard stack functionality that was needed for maze. the stack
// is used when doing the random walk to generate the maze and pop back up to previous locations when walking. it is
// also used to reverse the parent child ouput at the end
//
// Created using an array, Delete Theta(1), Get Top Theta(1), Add Theta(1)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


public class MazeStack
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //private Variables
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
    private int t;
	private Node[] node;
	private boolean empty;


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    public MazeStack(int size)
    {
        t = 0;
		node = new Node[size];
		empty = true;
    }
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Getter method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    public boolean getEmpty()
    {
        return empty;
    }
	

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	public Node top()
    {
		if (empty == true)
		{
			return null;
		}
		else 
		{
			return node[t];
		}
		
    }


    public void pop()
    {
		if (t == 0)
		{
			empty = true; // no need to delete as it is a reference and the top gets overwritten when needed
		}
		else
		{
			t--;
		}
		
    }
	
	
	public void push(Node in)
    {

		if (empty == true)
		{
			empty = false; 
			node[t] = in;
		}
		else
		{
			t++;
			node[t] = in;
		}
    }
	
}
